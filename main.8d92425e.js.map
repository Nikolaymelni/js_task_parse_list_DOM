{"version":3,"sources":["scripts/main.js"],"names":["listToSort","document","querySelector","strToNum","string","Number","replace","sortList","list","copyList","children","sort","a","b","dataset","salary","forEach","item","append","getEmployees","map","name","innerText"],"mappings":";AAAA,aAyBA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,KAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAvBA,IAAMA,EAAaC,SAASC,cAAc,MAE1C,SAASC,EAASC,GACTC,OAAAA,OAAOD,EAAOE,QAAQ,IAAK,IAAIA,QAAQ,IAAK,KAGrD,IAAMC,EAAW,SAACC,GACVC,IAAAA,EAAeD,EAAAA,EAAKE,UAE1BD,EAASE,KAAK,SAACC,EAAGC,GAChBV,OAAAA,EAASU,EAAEC,QAAQC,QAAUZ,EAASS,EAAEE,QAAQC,UAClDN,EAASO,QAAQ,SAAAC,GAAQT,OAAAA,EAAKU,OAAOD,MAGjCE,EAAe,SAACX,GACCA,EAAAA,EAAKE,UAEjBU,IAAI,SAAAH,GAAI,OAAA,EAAA,CACfI,KAAMJ,EAAKK,WAAcL,EAAKH,YAIlCP,EAASP,GACTmB,EAAanB","file":"main.8d92425e.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst listToSort = document.querySelector('ul');\r\n\r\nfunction strToNum(string) {\r\n  return Number(string.replace('$', '').replace(',', ''));\r\n}\r\n\r\nconst sortList = (list) => {\r\n  const copyList = [...list.children];\n\r\n  copyList.sort((a, b) =>\r\n    strToNum(b.dataset.salary) - strToNum(a.dataset.salary));\r\n  copyList.forEach(item => list.append(item));\r\n};\r\n\r\nconst getEmployees = (list) => {\r\n  const copyList = [...list.children];\n\r\n  copyList.map(item => ({\r\n    name: item.innerText, ...item.dataset,\r\n  }));\r\n};\r\n\r\nsortList(listToSort);\r\ngetEmployees(listToSort);\r\n"]}